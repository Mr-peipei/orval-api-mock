/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * Sample API
 * Optional multiline or single-line description in [CommonMark](http://commonmark.org/help/) or HTML.
 * OpenAPI spec version: 0.1.9
 */
import * as axios from 'axios';
import type { AxiosRequestConfig, AxiosResponse, AxiosError } from 'axios';
import { useQuery } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type { ToDo } from './sampleAPI.schemas';
import { rest } from 'msw';
import { faker } from '@faker-js/faker';

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

/**
 * Optional extended description in CommonMark or HTML.
 * @summary Returns a list of todos.
 */
export const getTodos = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ToDo[]>> => {
  return axios.default.get(`/todos`, options);
};

export const getGetTodosQueryKey = () => [`/todos`] as const;

export const getGetTodosQueryOptions = <
  TData = Awaited<ReturnType<typeof getTodos>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getTodos>>, TError, TData>;
  axios?: AxiosRequestConfig;
}): UseQueryOptions<Awaited<ReturnType<typeof getTodos>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetTodosQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTodos>>> = ({
    signal,
  }) => getTodos({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions };
};

export type GetTodosQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTodos>>
>;
export type GetTodosQueryError = AxiosError<unknown>;

/**
 * @summary Returns a list of todos.
 */
export const useGetTodos = <
  TData = Awaited<ReturnType<typeof getTodos>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getTodos>>, TError, TData>;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetTodosQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getGetTodosMock = () =>
  Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.datatype.number({ min: undefined, max: undefined }),
    title: faker.random.word(),
    description: faker.helpers.arrayElement([faker.random.word(), undefined]),
    isComplete: faker.datatype.boolean(),
  }));

export const getDefaultMSW = () => [
  rest.get('*/todos', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getGetTodosMock()),
    );
  }),
];
